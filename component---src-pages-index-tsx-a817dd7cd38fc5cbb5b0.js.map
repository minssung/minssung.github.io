{"version":3,"file":"component---src-pages-index-tsx-a817dd7cd38fc5cbb5b0.js","mappings":"oQAKA,MAAMA,EAAaC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,mBAAAC,YAAA,eAAVJ,CAAU,+NAavBK,EAAeL,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,qBAAAC,YAAA,eAAVJ,CAAU,2EASzBM,EAAUN,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,eAAVJ,CAAU,qBAIpBO,EAAQP,EAAAA,QAAOQ,GAAEN,WAAA,CAAAC,YAAA,cAAAC,YAAA,eAATJ,CAAS,yDAMjBS,EAAWT,EAAAA,QAAOU,EAACR,WAAA,CAAAC,YAAA,iBAAAC,YAAA,eAARJ,CAAQ,oDAaZW,GAPGX,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,gBAAAC,YAAA,eAAVJ,CAAU,2DAOFY,IAUjB,IAVkB,MACvBC,EAAK,KACLC,EAAI,KACJC,EAAI,MACJC,GAMDJ,EACC,MAAMK,EAAgB,IAAIC,KAAKC,eAAe,QAAS,CACrDC,KAAM,UACNC,MAAO,OACPC,IAAK,YACJC,OAAO,IAAIC,KAAKV,IAEnB,OACEW,EAAAA,cAAC1B,EAAU,KACT0B,EAAAA,cAACpB,EAAY,KACXoB,EAAAA,cAACC,EAAAA,EAAW,CAACV,MAAOA,EAAOW,IAAKd,KAElCY,EAAAA,cAACnB,EAAO,KACNmB,EAAAA,cAAClB,EAAK,KAAEM,GACRY,EAAAA,cAAChB,EAAQ,KAAEQ,IASF,GCtDF,SAASW,IACtB,MAAMC,GAAkBC,EAAAA,EAAAA,IAAe,eAwB/BC,MAAOC,GAAUH,EAAKI,kBAE9B,OACER,EAAAA,cAAA,OACES,MAAO,CACLC,QAAS,OACTC,oBAAqB,wCACrBC,IAAK,WAGNL,EACEM,QAAQC,GAASA,EAAKC,KAAKC,YAAY5B,MAAM6B,OAAS,IACtDC,KAAI/B,IAAqB,IAADgC,EAAAC,EAAAC,EAAA,IAAjBN,KAAMD,GAAM3B,EAClB,MAAMmC,EAGH,QAHYH,GACbI,EAAAA,EAAAA,GAC4B,QADpBH,EACNN,EAAKE,YAAYM,iBAAS,IAAAF,GAAiB,QAAjBC,EAA1BD,EAA4BI,uBAAe,IAAAH,OAAjB,EAA1BA,EAA6CI,wBAC9C,IAAAN,EAAAA,EAAIO,EAAAA,iBAEP,OACE1B,EAAAA,cAAC2B,EAAAA,GAAI,CACHC,IAAKd,EAAKe,GACVC,GAAIhB,EAAKE,YAAYe,KACrBtB,MAAO,CAAEuB,eAAgB,SAEzBhC,EAAAA,cAACd,EAAQ,CACPE,MAAO0B,EAAKE,YAAY5B,MACxBC,KAAMyB,EAAKE,YAAY3B,KACvBC,KAAMwB,EAAKE,YAAY1B,KACvBC,MAAO+B,IAEJ,IAKnB,C,cC3DA,EAAenC,IAAuC,IAAtC,KAAEiB,EAAI,SAAE6B,GAAyB9C,EAC/C,OACEa,EAAAA,cAACkC,EAAAA,EAAM,KACLlC,EAAAA,cAACG,EAAK,MAGX,EAEM,MAAMgC,EAAOA,IAAMnC,EAAAA,cAACoC,EAAAA,EAAG,K","sources":["webpack://minssung.github.io/./src/components/card/index.tsx","webpack://minssung.github.io/./src/templates/posts.tsx","webpack://minssung.github.io/./src/pages/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport styled from 'styled-components';\r\nimport { Tag } from '@components/tag';\r\n\r\nconst StyledCard = styled.div`\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n\r\n  &:hover {\r\n    transform: translateY(-4px);\r\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\r\n  }\r\n`;\r\n\r\nconst ImageWrapper = styled.div`\r\n  aspect-ratio: 16/9;\r\n  overflow: hidden;\r\n\r\n  .gatsby-image-wrapper {\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  padding: 1.5rem;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  font-size: 1.5rem;\r\n  margin: 0 0 0.5rem 0;\r\n  color: #1a1a1a;\r\n`;\r\n\r\nconst DateText = styled.p`\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n  margin: 0 0 1rem 0;\r\n`;\r\n\r\nconst TagList = styled.div`\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  flex-wrap: wrap;\r\n  margin: 1rem 0;\r\n`;\r\n\r\nexport const PostCard = ({\r\n  title,\r\n  date,\r\n  tags,\r\n  image,\r\n}: {\r\n  title: string;\r\n  date: string;\r\n  tags: string[];\r\n  image: IGatsbyImageData;\r\n}) => {\r\n  const formattedDate = new Intl.DateTimeFormat('ko-KR', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  }).format(new Date(date));\r\n\r\n  return (\r\n    <StyledCard>\r\n      <ImageWrapper>\r\n        <GatsbyImage image={image} alt={title} />\r\n      </ImageWrapper>\r\n      <Content>\r\n        <Title>{title}</Title>\r\n        <DateText>{formattedDate}</DateText>\r\n        {/* {tags?.length > 0 ? (\r\n          <TagList>\r\n            {tags.map((tag) => (\r\n              <Tag key={tag} tag={tag} />\r\n            ))}\r\n          </TagList>\r\n        ) : null} */}\r\n      </Content>\r\n    </StyledCard>\r\n  );\r\n};\r\n","import { graphql, Link, useStaticQuery } from 'gatsby';\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from 'gatsby-plugin-image';\r\nimport React from 'react';\r\nimport { defaultThumbnail } from './blog';\r\nimport { Tag } from '@components/tag';\r\nimport { PostCard } from '@components/card';\r\n\r\ninterface PostQuery {\r\n  allMarkdownRemark: {\r\n    edges: {\r\n      node: {\r\n        id: string;\r\n        excerpt: string;\r\n        frontmatter: {\r\n          date: string;\r\n          title: string;\r\n          path: string;\r\n          thumbnail: {\r\n            childImageSharp: {\r\n              gatsbyImageData: IGatsbyImageData;\r\n            };\r\n          };\r\n          tags: string[];\r\n        };\r\n      };\r\n    }[];\r\n  };\r\n}\r\n\r\nexport default function Posts() {\r\n  const data: PostQuery = useStaticQuery(graphql`\r\n    query PostQuery {\r\n      allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\r\n        edges {\r\n          node {\r\n            excerpt(pruneLength: 200)\r\n            id\r\n            frontmatter {\r\n              title\r\n              date(formatString: \"MMMM DD, YYYY\")\r\n              path\r\n              thumbnail {\r\n                childImageSharp {\r\n                  gatsbyImageData(width: 600)\r\n                }\r\n              }\r\n              tags\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const { edges: posts } = data.allMarkdownRemark;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'grid',\r\n        gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',\r\n        gap: '1.5rem',\r\n      }}\r\n    >\r\n      {posts\r\n        .filter((post) => post.node.frontmatter.title.length > 0)\r\n        .map(({ node: post }) => {\r\n          const thumbnail =\r\n            getImage(\r\n              post.frontmatter.thumbnail?.childImageSharp?.gatsbyImageData,\r\n            ) ?? defaultThumbnail;\r\n\r\n          return (\r\n            <Link\r\n              key={post.id}\r\n              to={post.frontmatter.path}\r\n              style={{ textDecoration: 'none' }}\r\n            >\r\n              <PostCard\r\n                title={post.frontmatter.title}\r\n                date={post.frontmatter.date}\r\n                tags={post.frontmatter.tags}\r\n                image={thumbnail}\r\n              />\r\n            </Link>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport Layout from '@components/layout';\r\nimport Posts from '../templates/posts';\r\nimport { SEO } from '@components/seo';\r\n\r\ninterface SiteQuery {\r\n  site: {\r\n    siteMetadata: {\r\n      title: string;\r\n    };\r\n  };\r\n}\r\n\r\ninterface HomePageQuery {\r\n  data: SiteQuery;\r\n  location: {\r\n    hash: string;\r\n    host: string;\r\n    hostname: string;\r\n    href: string;\r\n    key: string;\r\n    origin: string;\r\n    pathname: string;\r\n    port: string;\r\n    protocol: string;\r\n    search: string;\r\n    state: string;\r\n  };\r\n}\r\n\r\nexport default ({ data, location }: HomePageQuery) => {\r\n  return (\r\n    <Layout>\r\n      <Posts />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Head = () => <SEO />;\r\n"],"names":["StyledCard","styled","div","withConfig","displayName","componentId","ImageWrapper","Content","Title","h2","DateText","p","PostCard","_ref","title","date","tags","image","formattedDate","Intl","DateTimeFormat","year","month","day","format","Date","React","GatsbyImage","alt","Posts","data","useStaticQuery","edges","posts","allMarkdownRemark","style","display","gridTemplateColumns","gap","filter","post","node","frontmatter","length","map","_getImage","_post$frontmatter$thu","_post$frontmatter$thu2","thumbnail","getImage","childImageSharp","gatsbyImageData","defaultThumbnail","Link","key","id","to","path","textDecoration","location","Layout","Head","SEO"],"sourceRoot":""}